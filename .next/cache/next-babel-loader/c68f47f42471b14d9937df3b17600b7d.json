{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  initialPage: PropTypes.number,\n  pageSize: PropTypes.number\n};\nconst defaultProps = {\n  initialPage: 1,\n  pageSize: 10\n};\n\nclass Pagination extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      pager: {}\n    });\n  }\n\n  componentWillMount() {\n    // set page if items array isn't empty\n    if (this.props.items && this.props.items.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // reset page if items array has changed\n    if (this.props.items !== prevProps.items) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage(page) {\n    var {\n      items,\n      pageSize\n    } = this.props;\n    var pager = this.state.pager;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    } // get new pager object for specified page\n\n\n    pager = this.getPager(items.length, page, pageSize); // get new page of items from items array\n\n    var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1); // update state\n\n    this.setState({\n      pager: pager\n    }); // call change page function in parent component\n\n    this.props.onChangePage(pageOfItems, pager);\n  }\n\n  getPager(totalItems, currentPage, pageSize) {\n    // default to first page\n    currentPage = currentPage || 1; // default page size is 10\n\n    pageSize = pageSize || 10; // calculate total pages\n\n    var totalPages = Math.ceil(totalItems / pageSize);\n    var startPage, endPage;\n\n    if (totalPages <= 10) {\n      // less than 10 total pages so show all\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // more than 10 total pages so calculate start and end pages\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    } // calculate start and end item indexes\n\n\n    var startIndex = (currentPage - 1) * pageSize;\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // create an array of pages to ng-repeat in the pager control\n\n    var pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i); // return object with all pager properties required by the view\n\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages\n    };\n  }\n\n  render() {\n    var pager = this.state.pager;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    } // console.log(this.state.pager)\n\n\n    return __jsx(\"div\", {\n      className: \"pagination-area text-center\"\n    }, __jsx(Link, {\n      href: \"#\"\n    }, __jsx(\"a\", {\n      onClick: e => {\n        e.preventDefault();\n        this.setPage(pager.currentPage - 1);\n      },\n      className: `prev page-numbers ${pager.currentPage === 1 ? 'disabled' : ''}`\n    }, __jsx(\"i\", {\n      className: \"bx bx-chevron-left\"\n    }))), pager.pages.map((page, index) => __jsx(Link, {\n      href: \"#\",\n      key: index\n    }, __jsx(\"a\", {\n      className: `page-numbers ${pager.currentPage === page ? 'current' : ''}`,\n      onClick: e => {\n        e.preventDefault();\n        this.setPage(page);\n      }\n    }, page))), __jsx(Link, {\n      href: \"#\"\n    }, __jsx(\"a\", {\n      onClick: e => {\n        e.preventDefault();\n        this.setPage(pager.currentPage + 1);\n      },\n      className: `next page-numbers ${pager.currentPage === pager.totalPages ? 'disabled' : ''}`\n    }, __jsx(\"i\", {\n      className: \"bx bx-chevron-right\"\n    }))));\n  }\n\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination;","map":{"version":3,"sources":["E:/WebTemplate/livani-react-next-ecommerce-template/livani-react/components/Common/Pagination.js"],"names":["React","PropTypes","Link","propTypes","items","array","isRequired","onChangePage","func","initialPage","number","pageSize","defaultProps","Pagination","Component","pager","componentWillMount","props","length","setPage","componentDidUpdate","prevProps","prevState","page","state","totalPages","getPager","pageOfItems","slice","startIndex","endIndex","setState","totalItems","currentPage","Math","ceil","startPage","endPage","min","pages","Array","keys","map","i","render","e","preventDefault","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\n\nconst propTypes = {\n    items: PropTypes.array.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    initialPage: PropTypes.number,\n    pageSize: PropTypes.number\n}\n\nconst defaultProps = {\n    initialPage: 1,\n    pageSize: 10\n}\n\nclass Pagination extends React.Component {\n\n    state = { pager: {} };\n\n    componentWillMount() {\n        // set page if items array isn't empty\n        if (this.props.items && this.props.items.length) {\n            this.setPage(this.props.initialPage);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // reset page if items array has changed\n        if (this.props.items !== prevProps.items) {\n            this.setPage(this.props.initialPage);\n        }\n    }\n\n    setPage(page) {\n        var { items, pageSize } = this.props;\n        var pager = this.state.pager;\n\n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n\n        // get new pager object for specified page\n        pager = this.getPager(items.length, page, pageSize);\n\n        // get new page of items from items array\n        var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n\n        // update state\n        this.setState({ pager: pager });\n\n        // call change page function in parent component\n        this.props.onChangePage(pageOfItems, pager);\n    }\n\n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n\n        // default page size is 10\n        pageSize = pageSize || 10;\n\n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n\n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (currentPage + 4 >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n\n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n\n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages\n        };\n    }\n\n    render() {\n        var pager = this.state.pager;\n\n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n\n        // console.log(this.state.pager)\n\n        return (\n            <div className=\"pagination-area text-center\">\n                <Link href=\"#\">\n                    <a \n                        onClick={e => {e.preventDefault();this.setPage(pager.currentPage - 1)}}\n                        className={`prev page-numbers ${pager.currentPage === 1 ? 'disabled' : ''}`}\n                    >\n                        <i className='bx bx-chevron-left'></i>\n                    </a>\n                </Link>\n\n                {pager.pages.map((page, index) =>\n                    <Link href=\"#\" key={index}>\n                        <a \n                            className={`page-numbers ${pager.currentPage === page ? 'current' : ''}`}\n                            onClick={e => {e.preventDefault();this.setPage(page)}}\n                        >{page}</a>\n                    </Link>\n                )}\n                <Link href=\"#\">\n                    <a \n                        onClick={e => {e.preventDefault();this.setPage(pager.currentPage + 1)}}\n                        className={`next page-numbers ${pager.currentPage === pager.totalPages ? 'disabled' : ''}`}\n                    >\n                        <i className='bx bx-chevron-right'></i>\n                    </a>\n                </Link>\n            </div>\n        );\n    }\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\n\nexport default Pagination;"]},"metadata":{},"sourceType":"module"}